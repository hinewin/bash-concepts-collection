Module 2 Exercise - Solution

For all the answers, you can either use `grep -E` or `egrep` interchangeably.

------------------------------------
1. Show the filenames of files in the `cis18b` directory that have punctuation marks in the file content.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   grep -E -l '[[:punct:]]' *
   ```

   Explanation: 
   - `grep`: Searches for patterns in files.
   - `-E`: Enables extended regular expressions.
   - `-l`: Lists only the names of files with matching lines.
   - `'[[:punct:]]'`: Matches any punctuation character.
   - `*`: Searches all files in the current directory.

   We also discussed that:
   ```bash
   ls | grep -E -l '[[:punct:]]'
   ```
   doesn't give the same result.

   </details>

------------------------------------
2. Show the count of the lines that have punctuation marks in each of the files of the `cis18b` directory.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   grep -E -c '[[:punct:]]' *
   ```

   Explanation:
   - `-c`: Counts the number of matching lines per file.

   </details>

------------------------------------
3. Show the line number and the lines that have only punctuation marks (and nothing else on the line) in the files of the `cis18b` directory.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   grep -E -n '^[[:punct:]]+$' *
   ```

   and:
   ```bash
   grep -E -nv '[^[:punct:]]' *
   ```

   Explanation:
   - `-n`: Prefixes each line of output with the line number.
   - `'^[[:punct:]]+$'`: Matches lines consisting only of punctuation.
   - `-v`: Inverts the match, showing lines that do not match the pattern.

   </details>

------------------------------------
4. Show the line number and the lines that don't contain any number in the file `module1input`.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   grep -E -nv '[0-9]' module1input
   ```

   Explanation:
   - `'[0-9]'`: Matches any digit.

   </details>

------------------------------------
5. Show the line number of all lines that have only whitespace characters, for all files in the `cis18b` directory.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   egrep -n '^\s+$' *
   ```

   Explanation:
   - `egrep`: Equivalent to `grep -E`.
   - `'\s+'`: Matches one or more whitespace characters.

   </details>

------------------------------------
6. Go to your home directory, create 2 new files `fA` and `fB`, create a symbolic link to file `fA`, and create a directory `d2`.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   touch fA fB
   ln -s fA linkA
   mkdir d2
   ```

   Explanation:
   - `touch`: Creates empty files.
   - `ln -s`: Creates a symbolic link.
   - `mkdir`: Creates a new directory.

   We also created a second link to a "today" directory:
   ```bash
   ln -s ~/today linkToday
   ```

   </details>

------------------------------------
7. Start from your home directory, find all links to file `fA`.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   find ~ -lname '*fA'
   ```

   Explanation:
   - `find`: Searches for files in a directory hierarchy.
   - `~`: Represents the home directory.
   - `-lname`: Matches symbolic links by name.

   The above is different than:
   ```bash
   find ~ -type l
   ```
   which will show both links.

   </details>

------------------------------------
8. Start from your home directory, find all directories that have 'd' in the name.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   find ~ -type d -name '*d*'
   ```

   Explanation:
   - `-type d`: Searches for directories.
   - `-name '*d*'`: Matches names containing 'd'.

   </details>

------------------------------------
9. Start from your home directory, find all regular files that have a size less than 1K bytes.

   <details>
   <summary><strong>Answer:</strong></summary>
   
   ```bash
   find ~ -type f -size -1k
   ```

   Explanation:
   - `-type f`: Searches for regular files.
   - `-size -1k`: Matches files smaller than 1 kilobyte.

   </details>

------------------------------------
10. Start from your home directory, find all files that are not regular files.

    <details>
    <summary><strong>Answer:</strong></summary>
    
    ```bash
    find ~ ! -type f
    ```

    Explanation:
    - `! -type f`: Finds files that are not regular files.

    </details>

------------------------------------
11. Start from your home directory, delete all regular files that are empty.

    <details>
    <summary><strong>Answer:</strong></summary>
    
    ```bash
    find ~ -type f -empty -exec rm -i {} \;
    ```

    Explanation:
    - `-empty`: Matches empty files.
    - `-exec rm -i {} \;`: Executes `rm` interactively on each file found.

    If you want confirmation before delete since interactive mode works with `-exec` because `-exec` works with one file at a time.

    or:
    ```bash
    find ~ -type f -empty | xargs rm
    ```
    If you want to delete without confirmation since interactive mode doesn't work with the batch processing of `xargs`.

    </details>

------------------------------------
12. Start from your home directory, do the long listing of all files that are regular files.

    <details>
    <summary><strong>Answer:</strong></summary>
    
    ```bash
    find ~ -type f | xargs ls -l
    ```

    Explanation:
    - `xargs ls -l`: Passes the list of files to `ls -l` for detailed listing.

    </details>

------------------------------------
13. Start from your home directory, update the modified time of all regular files that have modified time of less than 1 day.

    <details>
    <summary><strong>Answer:</strong></summary>
    
    ```bash
    find ~ -type f -mtime -1 | xargs touch
    ```

    Explanation:
    - `-mtime -1`: Matches files modified within the last day.
    - `xargs touch`: Updates the modified time of each file.

    </details>

